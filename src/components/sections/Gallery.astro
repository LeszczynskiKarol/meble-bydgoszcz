---
import type { GalleryImage } from '../../lib/types';
import Lightbox from '../ui/Lightbox';

export interface Props {
  title: string;
  subtitle?: string;
  images?: GalleryImage[];
  viewAllLink?: string;
}

const { title, subtitle, images = [], viewAllLink } = Astro.props;

// Take max 10 images for homepage
const displayImages = images.slice(0, 10);
---

<section class="gallery">
  <div class="gallery-container">
    <div class="section-header">
      <h2>{title}</h2>
      {subtitle && <p>{subtitle}</p>}
    </div>

    {displayImages.length > 0 ? (
      <>
        <div class="gallery-carousel">
          <div class="gallery-track" id="galleryTrack">
            {displayImages.map((image) => (
              <div class="gallery-item" data-category={image.category}>
                <img
                  src={image.src}
                  alt={image.alt}
                  class="gallery-image"
                  loading="lazy"
                />
              </div>
            ))}
          </div>
        </div>

        <div class="gallery-controls">
          <button
            class="gallery-btn prev"
            onclick="scrollGallery(-1)"
            aria-label="Poprzednia realizacja"
          ></button>
          <button
            class="gallery-btn next"
            onclick="scrollGallery(1)"
            aria-label="Następna realizacja"
          ></button>
        </div>

        <Lightbox client:idle images={displayImages} />
      </>
    ) : (
      <div class="no-images">
        <p>Brak obrazów do wyświetlenia</p>
      </div>
    )}

    {viewAllLink && (
      <div class="gallery-footer">
        <a href={viewAllLink} class="gallery-link">
          Zobacz wszystkie realizacje
          <span>→</span>
        </a>
      </div>
    )}
  </div>
</section>

<style>
  .gallery {
    @apply py-20 px-4 sm:px-6 lg:px-8 bg-white overflow-hidden;
  }

  .gallery-container {
    @apply max-w-7xl mx-auto;
  }

  .section-header {
    @apply text-center mb-16;
  }

  .section-header h2 {
    @apply text-4xl font-bold text-gray-800 mb-4 relative inline-block;
  }

  .section-header h2::after {
    content: '';
    @apply absolute -bottom-2 left-1/2 -translate-x-1/2 w-20 h-1 bg-purple-600 rounded-full;
  }

  .section-header p {
    @apply text-xl text-gray-600 max-w-2xl mx-auto mt-6;
  }

  .gallery-carousel {
    @apply relative mt-12 overflow-hidden;
  }

  .gallery-track {
    @apply flex gap-8 transition-transform duration-500 py-4;
  }

  .gallery-item {
    @apply flex-shrink-0 w-[350px] h-[400px] relative rounded-2xl overflow-hidden cursor-pointer transition-all duration-300 shadow-lg;
  }

  @media (max-width: 768px) {
    .gallery-item {
      @apply w-[280px] h-[350px];
    }
  }

  .gallery-item:hover {
    @apply scale-105 shadow-2xl;
  }

  .gallery-image {
    @apply w-full h-full object-cover transition-transform duration-300;
  }

  .gallery-item:hover .gallery-image {
    @apply scale-110;
  }

  .gallery-controls {
    @apply flex justify-center gap-8 mt-8;
  }

  .gallery-btn {
    @apply w-12 h-12 rounded-full bg-white border-2 border-purple-600 cursor-pointer flex items-center justify-center transition-all duration-300;
  }

  .gallery-btn:hover {
    @apply bg-purple-600 scale-110;
  }

  .gallery-btn::before {
    content: '';
    @apply w-3 h-3 border-t-[3px] border-r-[3px] border-purple-600 transition-colors duration-300;
  }

  .gallery-btn:hover::before {
    @apply border-white;
  }

  .gallery-btn.prev::before {
    transform: rotate(-135deg);
    margin-left: 4px;
  }

  .gallery-btn.next::before {
    transform: rotate(45deg);
    margin-right: 4px;
  }

  .gallery-footer {
    @apply text-center mt-8;
  }

  .gallery-link {
    @apply inline-flex items-center gap-2 mt-8 px-10 py-4 bg-purple-600 text-white no-underline rounded-full font-semibold transition-all duration-300 shadow-lg;
  }

  .gallery-link:hover {
    @apply -translate-y-1 shadow-xl bg-purple-700;
  }

  .gallery-link span {
    @apply text-xl;
  }

  .no-images {
    @apply text-center py-12;
  }

  .no-images p {
    @apply text-gray-500 text-lg;
  }
</style>

<script>
  // Gallery carousel functionality
  let galleryPosition = 0;

  window.scrollGallery = function(direction: number) {
    const track = document.getElementById('galleryTrack');
    if (!track) return;

    const items = track.querySelectorAll('.gallery-item');
    if (items.length === 0) return;

    const itemWidth = (items[0] as HTMLElement).offsetWidth + 32; // width + gap
    const containerWidth = track.parentElement?.offsetWidth || 0;
    const maxItems = Math.floor(containerWidth / itemWidth);
    const maxScroll = Math.max(0, (items.length - maxItems) * itemWidth);

    galleryPosition += direction * itemWidth * Math.max(1, maxItems - 1);

    // Loop back
    if (galleryPosition > maxScroll) {
      galleryPosition = 0;
    } else if (galleryPosition < 0) {
      galleryPosition = maxScroll;
    }

    track.style.transform = `translateX(-${galleryPosition}px)`;
  };

  // Auto-scroll
  let galleryInterval: NodeJS.Timeout;

  function startGalleryAutoScroll() {
    galleryInterval = setInterval(() => {
      window.scrollGallery(1);
    }, 4000);
  }

  // Start auto-scroll only if there are images
  const track = document.getElementById('galleryTrack');
  if (track && track.querySelectorAll('.gallery-item').length > 0) {
    startGalleryAutoScroll();

    // Pause on hover
    const galleryCarousel = document.querySelector('.gallery-carousel');
    if (galleryCarousel) {
      galleryCarousel.addEventListener('mouseenter', () => {
        clearInterval(galleryInterval);
      });

      galleryCarousel.addEventListener('mouseleave', () => {
        startGalleryAutoScroll();
      });
    }
  }

  // Lightbox functionality
  const galleryItems = document.querySelectorAll('.gallery-item');
  galleryItems.forEach((item, index) => {
    item.addEventListener('click', () => {
      const event = new CustomEvent('openLightbox', { detail: { index } });
      window.dispatchEvent(event);
    });
  });
</script>